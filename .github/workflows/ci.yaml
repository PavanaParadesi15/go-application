# CICD using GitHub actions

name: CI/CD

# Exclude the workflow to run on changes to the helm chart
# Whenever there is a commit or PR , this workflow will be triggered by the github actions on a commit push to /main branch
# it can ignore the changes to helm folder ,like changes in values.yaml file (because CD will automatically pick those changes, CI need not be triggered) 
# Also ignore changes to k8s directories and README.md file 
on:
  push:
    branches:
      - main
    paths-ignore:
      - 'helm/**'
      - 'k8s/**'
      - 'README.md'
      - 'application-info/**'

# Inside the jobs we write all build stages for the application
# In the build stage , github actions can use 'ubuntu-latest' runner 
# Checkout source code, install go-lang in it, run build command and test unit tests. This is build stage 1.

jobs:

  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Go 1.22
      uses: actions/setup-go@v2
      with:
        go-version: 1.22

    - name: Build
      run: go build -o go-web-app

    - name: Test
      run: go test ./...
  
  # For every stage we need an image to run, github actions executes the stages on the runner
  # In the lint stage, we use the golangci-lint-action to run the linter on the codebase 
  # This is build stage 2. code quality check.

  code-quality:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: 'latest'
  
  # Stage to build the docker image and push it to the registry
  # This is build stage 3.
  # Dockerhub username and password as provided in github Secrets and Variables
  # Dockerhub username and password are stored in github secrets and are accessed using ${{ secrets.DOCKERHUB_USERNAME }} and ${{ secrets.DOCKERHUB_TOKEN }}
  # The docker image tag has to be dockerhub username and is tagged with the github run id to keep track of the image version
  # The image is pushed to the dockerhub registry

  push:
    runs-on: ubuntu-latest

    needs: build

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and Push action
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/go-web-app:${{github.run_id}}

# Last stage is to update the helm chart with new tag
# values.yaml in helm chart will  be updated with the new tag using sed command
# The changes are committed and pushed to the same repository in github 
# For the commit and push the updated chart to github ,we need a github PAT token to push to git repo

  update-newtag-in-helm-chart:
    runs-on: ubuntu-latest

    needs: push

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.TOKEN }}
        repository: PavanaParadesi15/go-application
          # ssh-strict: true
          # ssh-user: git
          # persist-credentials: true
          # clean: true
          # sparse-checkout-cone-mode: true
          # fetch-depth: 1
          # fetch-tags: false
          # show-progress: true
          # lfs: false
          # submodules: false
          # set-safe-directory: true

    - name: Update tag in Helm chart
      run: |
        sed -i 's/tag: .*/tag: "${{github.run_id}}"/' helm/go-web-app-chart/values.yaml

    - name: Commit and push changes
      run: |
        git config --global user.email "pavana.p0215@gmail.com"
        git config --global user.name "PavanaParadesi15"
        git add helm/go-web-app-chart/values.yaml
        git commit -m "Update tag in Helm chart"
        git push